
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/eigen.h>
#include <pybind11/stl.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

namespace py = pybind11;
using namespace pybind11::literals;

#pragma warning(disable : 4996)
#include <pcl/visualization/pcl_visualizer.h>

using namespace pcl::visualization;


void defineVisualizationPCLVisualizer(py::module &m) {
    using Class = pcl::visualization::PCLVisualizer;
    using Ptr = Class::Ptr;
    using ConstPtr = Class::ConstPtr;
    using GeometryHandler = Class::GeometryHandler;
    using GeometryHandlerPtr = Class::GeometryHandlerPtr;
    using GeometryHandlerConstPtr = Class::GeometryHandlerConstPtr;
    using ColorHandler = Class::ColorHandler;
    using ColorHandlerPtr = Class::ColorHandlerPtr;
    using ColorHandlerConstPtr = Class::ColorHandlerConstPtr;
    py::class_<Class, boost::shared_ptr<Class>> cls(m, "PCLVisualizer");
    cls.def(py::init<std::string, bool>(), "name"_a="", "create_interactor"_a=true);
    cls.def("spin", &Class::spin);
    cls.def("spinOnce", &Class::spinOnce, "time"_a=1, "force_redraw"_a=false);
    cls.def("removeOrientationMarkerWidgetAxes", &Class::removeOrientationMarkerWidgetAxes);
    cls.def("addCoordinateSystem", py::overload_cast<double, int> (&Class::addCoordinateSystem), "scale"_a, "viewport"_a);
    cls.def("addCoordinateSystem", py::overload_cast<double, const std::string &, int> (&Class::addCoordinateSystem), "scale"_a=1.0, "id"_a="reference", "viewport"_a=0);
    cls.def("addCoordinateSystem", py::overload_cast<double, float, float, float, int> (&Class::addCoordinateSystem), "scale"_a, "x"_a, "y"_a, "z"_a, "viewport"_a);
    cls.def("addCoordinateSystem", py::overload_cast<double, float, float, float, const std::string &, int> (&Class::addCoordinateSystem), "scale"_a, "x"_a, "y"_a, "z"_a, "id"_a="reference", "viewport"_a=0);
    cls.def("addCoordinateSystem", py::overload_cast<double, const Eigen::Affine3f &, int> (&Class::addCoordinateSystem), "scale"_a, "t"_a, "viewport"_a);
    cls.def("addCoordinateSystem", py::overload_cast<double, const Eigen::Affine3f &, const std::string &, int> (&Class::addCoordinateSystem), "scale"_a, "t"_a, "id"_a="reference", "viewport"_a=0);
    cls.def("removeCoordinateSystem", py::overload_cast<int> (&Class::removeCoordinateSystem), "viewport"_a);
    cls.def("removeCoordinateSystem", py::overload_cast<const std::string &, int> (&Class::removeCoordinateSystem), "id"_a="reference", "viewport"_a=0);
    cls.def("removePointCloud", &Class::removePointCloud, "id"_a="cloud", "viewport"_a=0);
    cls.def("removePolygonMesh", &Class::removePolygonMesh, "id"_a="polygon", "viewport"_a=0);
    cls.def("removeShape", &Class::removeShape, "id"_a="cloud", "viewport"_a=0);
    cls.def("removeText3D", &Class::removeText3D, "id"_a="cloud", "viewport"_a=0);
    cls.def("removeAllPointClouds", &Class::removeAllPointClouds, "viewport"_a=0);
    cls.def("removeAllShapes", &Class::removeAllShapes, "viewport"_a=0);
    cls.def("removeAllCoordinateSystems", &Class::removeAllCoordinateSystems, "viewport"_a=0);
    cls.def("addText", py::overload_cast<const std::string &, int, int, const std::string &, int> (&Class::addText), "text"_a, "xpos"_a, "ypos"_a, "id"_a="", "viewport"_a=0);
    cls.def("addText", py::overload_cast<const std::string &, int, int, double, double, double, const std::string &, int> (&Class::addText), "text"_a, "xpos"_a, "ypos"_a, "r"_a, "g"_a, "b"_a, "id"_a="", "viewport"_a=0);
    cls.def("addText", py::overload_cast<const std::string &, int, int, int, double, double, double, const std::string &, int> (&Class::addText), "text"_a, "xpos"_a, "ypos"_a, "fontsize"_a, "r"_a, "g"_a, "b"_a, "id"_a="", "viewport"_a=0);
    cls.def("updateText", py::overload_cast<const std::string &, int, int, const std::string &> (&Class::updateText), "text"_a, "xpos"_a, "ypos"_a, "id"_a="");
    cls.def("updateText", py::overload_cast<const std::string &, int, int, double, double, double, const std::string &> (&Class::updateText), "text"_a, "xpos"_a, "ypos"_a, "r"_a, "g"_a, "b"_a, "id"_a="");
    cls.def("updateText", py::overload_cast<const std::string &, int, int, int, double, double, double, const std::string &> (&Class::updateText), "text"_a, "xpos"_a, "ypos"_a, "fontsize"_a, "r"_a, "g"_a, "b"_a, "id"_a="");
    cls.def("updateShapePose", &Class::updateShapePose, "id"_a, "pose"_a);
    cls.def("updateCoordinateSystemPose", &Class::updateCoordinateSystemPose, "id"_a, "pose"_a);
    cls.def("updatePointCloudPose", &Class::updatePointCloudPose, "id"_a, "pose"_a);
    cls.def("contains", &Class::contains, "id"_a);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (addPointCloud);
    // Non templated function disambiguation not implemented (updatePointCloud);
    // Non templated function disambiguation not implemented (updatePointCloud);
    // Non templated function disambiguation not implemented (updatePointCloud);
    // Non templated function disambiguation not implemented (updatePointCloud);
    // Non templated function disambiguation not implemented (addPolygonMesh);
    // Non templated function disambiguation not implemented (updatePolygonMesh);
    cls.def("addPolylineFromPolygonMesh", &Class::addPolylineFromPolygonMesh, "polymesh"_a, "id"_a="polyline", "viewport"_a=0);
    cls.def("addTextureMesh", &Class::addTextureMesh, "polymesh"_a, "id"_a="texture", "viewport"_a=0);
    cls.def("removeCorrespondences", &Class::removeCorrespondences, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateColorHandlerIndex", &Class::updateColorHandlerIndex, "id"_a, "index"_a);
    cls.def("wasStopped", &Class::wasStopped);
    cls.def("resetStoppedFlag", &Class::resetStoppedFlag);
    cls.def("close", &Class::close);
    cls.def("createViewPort", &Class::createViewPort, "xmin"_a, "ymin"_a, "xmax"_a, "ymax"_a, "viewport"_a);
    cls.def("createViewPortCamera", &Class::createViewPortCamera, "viewport"_a);
    cls.def("addModelFromPolyData", py::overload_cast<vtkSmartPointer<vtkPolyData>, const std::string &, int> (&Class::addModelFromPolyData), "polydata"_a, "id"_a="PolyData", "viewport"_a=0);
    cls.def("addModelFromPolyData", py::overload_cast<vtkSmartPointer<vtkPolyData>, vtkSmartPointer<vtkTransform>, const std::string &, int> (&Class::addModelFromPolyData), "polydata"_a, "transform"_a, "id"_a="PolyData", "viewport"_a=0);
    cls.def("addModelFromPLYFile", py::overload_cast<const std::string &, const std::string &, int> (&Class::addModelFromPLYFile), "filename"_a, "id"_a="PLYModel", "viewport"_a=0);
    cls.def("addModelFromPLYFile", py::overload_cast<const std::string &, vtkSmartPointer<vtkTransform>, const std::string &, int> (&Class::addModelFromPLYFile), "filename"_a, "transform"_a, "id"_a="PLYModel", "viewport"_a=0);
    cls.def("addCylinder", &Class::addCylinder, "coefficients"_a, "id"_a="cylinder", "viewport"_a=0);
    // Non templated function disambiguation not implemented (addSphere);
    // Non templated function disambiguation not implemented (addLine);
    cls.def("addPlane", py::overload_cast<const pcl::ModelCoefficients &, const std::string &, int> (&Class::addPlane), "coefficients"_a, "id"_a="plane", "viewport"_a=0);
    cls.def("addPlane", py::overload_cast<const pcl::ModelCoefficients &, double, double, double, const std::string &, int> (&Class::addPlane), "coefficients"_a, "x"_a, "y"_a, "z"_a, "id"_a="plane", "viewport"_a=0);
    cls.def("addCircle", py::overload_cast<const pcl::ModelCoefficients &, const std::string &, int> (&Class::addCircle), "coefficients"_a, "id"_a="circle", "viewport"_a=0);
    cls.def("addCone", &Class::addCone, "coefficients"_a, "id"_a="cone", "viewport"_a=0);
    cls.def("addCube", py::overload_cast<const pcl::ModelCoefficients &, const std::string &, int> (&Class::addCube), "coefficients"_a, "id"_a="cube", "viewport"_a=0);
    cls.def("addCube", py::overload_cast<const Eigen::Vector3f &, const Eigen::Quaternionf &, double, double, double, const std::string &, int> (&Class::addCube), "translation"_a, "rotation"_a, "width"_a, "height"_a, "depth"_a, "id"_a="cube", "viewport"_a=0);
    cls.def("addCube", py::overload_cast<float, float, float, float, float, float, double, double, double, const std::string &, int> (&Class::addCube), "x_min"_a, "x_max"_a, "y_min"_a, "y_max"_a, "z_min"_a, "z_max"_a, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="cube", "viewport"_a=0);
    cls.def("renderView", &Class::renderView, "xres"_a, "yres"_a, "cloud"_a);
    cls.def("renderViewTesselatedSphere", &Class::renderViewTesselatedSphere, "xres"_a, "yres"_a, "cloud"_a, "poses"_a, "enthropies"_a, "tesselation_level"_a, "view_angle"_a=45, "radius_sphere"_a=1, "use_vertices"_a=true);
    cls.def("initCameraParameters", &Class::initCameraParameters);
    cls.def("loadCameraParameters", &Class::loadCameraParameters, "file"_a);
    cls.def("cameraParamsSet", &Class::cameraParamsSet);
    cls.def("cameraFileLoaded", &Class::cameraFileLoaded);
    cls.def("updateCamera", &Class::updateCamera);
    cls.def("resetCamera", &Class::resetCamera);
    cls.def("resetCameraViewpoint", &Class::resetCameraViewpoint, "id"_a="cloud");
    cls.def("saveScreenshot", &Class::saveScreenshot, "file"_a);
    cls.def("saveCameraParameters", &Class::saveCameraParameters, "file"_a);
    cls.def("createInteractor", &Class::createInteractor);
    cls.def_static("convertToVtkMatrix", py::overload_cast<const Eigen::Matrix4f &, vtkSmartPointer<vtkMatrix4x4> &> (&Class::convertToVtkMatrix), "m"_a, "vtk_matrix"_a);
    cls.def_static("convertToVtkMatrix", py::overload_cast<const Eigen::Vector4f &, const Eigen::Quaternion<float> &, vtkSmartPointer<vtkMatrix4x4> &> (&Class::convertToVtkMatrix), "origin"_a, "orientation"_a, "vtk_matrix"_a);
    cls.def_static("convertToEigenMatrix", &Class::convertToEigenMatrix, "vtk_matrix"_a, "m"_a);
    cls.def("setFullScreen", &Class::setFullScreen, "mode"_a);
    cls.def("setWindowName", &Class::setWindowName, "name"_a);
    cls.def("setWindowBorders", &Class::setWindowBorders, "mode"_a);
    cls.def("setBackgroundColor", py::overload_cast<const double &, const double &, const double &, int> (&Class::setBackgroundColor), "r"_a, "g"_a, "b"_a, "viewport"_a=0);
    cls.def("setPointCloudRenderingProperties", py::overload_cast<int, double, double, double, const std::string &, int> (&Class::setPointCloudRenderingProperties), "property"_a, "val1"_a, "val2"_a, "val3"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("setPointCloudRenderingProperties", py::overload_cast<int, double, double, const std::string &, int> (&Class::setPointCloudRenderingProperties), "property"_a, "val1"_a, "val2"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("setPointCloudRenderingProperties", py::overload_cast<int, double, const std::string &, int> (&Class::setPointCloudRenderingProperties), "property"_a, "value"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("setPointCloudSelected", &Class::setPointCloudSelected, "selected"_a, "id"_a="cloud");
    cls.def("setShapeRenderingProperties", py::overload_cast<int, double, const std::string &, int> (&Class::setShapeRenderingProperties), "property"_a, "value"_a, "id"_a, "viewport"_a=0);
    cls.def("setShapeRenderingProperties", py::overload_cast<int, double, double, double, const std::string &, int> (&Class::setShapeRenderingProperties), "property"_a, "val1"_a, "val2"_a, "val3"_a, "id"_a, "viewport"_a=0);
    cls.def("setRepresentationToSurfaceForAllActors", &Class::setRepresentationToSurfaceForAllActors);
    cls.def("setRepresentationToPointsForAllActors", &Class::setRepresentationToPointsForAllActors);
    cls.def("setRepresentationToWireframeForAllActors", &Class::setRepresentationToWireframeForAllActors);
    cls.def("setShowFPS", &Class::setShowFPS, "show_fps"_a);
    cls.def("setCameraPosition", py::overload_cast<double, double, double, double, double, double, double, double, double, int> (&Class::setCameraPosition), "pos_x"_a, "pos_y"_a, "pos_z"_a, "view_x"_a, "view_y"_a, "view_z"_a, "up_x"_a, "up_y"_a, "up_z"_a, "viewport"_a=0);
    cls.def("setCameraPosition", py::overload_cast<double, double, double, double, double, double, int> (&Class::setCameraPosition), "pos_x"_a, "pos_y"_a, "pos_z"_a, "up_x"_a, "up_y"_a, "up_z"_a, "viewport"_a=0);
    cls.def("setCameraParameters", py::overload_cast<const Eigen::Matrix3f &, const Eigen::Matrix4f &, int> (&Class::setCameraParameters), "intrinsics"_a, "extrinsics"_a, "viewport"_a=0);
    cls.def("setCameraParameters", py::overload_cast<const Camera &, int> (&Class::setCameraParameters), "camera"_a, "viewport"_a=0);
    cls.def("setCameraClipDistances", &Class::setCameraClipDistances, "near"_a, "far"_a, "viewport"_a=0);
    cls.def("setCameraFieldOfView", &Class::setCameraFieldOfView, "fovy"_a, "viewport"_a=0);
    cls.def("setPosition", &Class::setPosition, "x"_a, "y"_a);
    cls.def("setSize", &Class::setSize, "xw"_a, "yw"_a);
    cls.def("setUseVbos", &Class::setUseVbos, "use_vbos"_a);
    cls.def("setLookUpTableID", &Class::setLookUpTableID, "id"_a);
    cls.def("getColorHandlerIndex", &Class::getColorHandlerIndex, "id"_a);
    cls.def("getGeometryHandlerIndex", &Class::getGeometryHandlerIndex, "id"_a);
    cls.def("getPointCloudRenderingProperties", &Class::getPointCloudRenderingProperties, "property"_a, "value"_a, "id"_a="cloud");
    cls.def("getCameraFile", &Class::getCameraFile);
    cls.def("getCameras", &Class::getCameras, "cameras"_a);
    cls.def("getViewerPose", &Class::getViewerPose, "viewport"_a=0);
    cls.def("getRenderWindow", &Class::getRenderWindow);
    cls.def("getRendererCollection", &Class::getRendererCollection);
    cls.def("getCloudActorMap", &Class::getCloudActorMap);
    cls.def("getShapeActorMap", &Class::getShapeActorMap);
    cls.def("getInteractorStyle", &Class::getInteractorStyle);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointSurfel &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointSurfel>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZ &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZ>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZL &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZL>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZI &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZI>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZRGB &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZRGB>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZRGBA &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZRGBA>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointNormal &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointNormal>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZRGBNormal &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZRGBNormal>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointXYZRGBL &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointXYZRGBL>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addText3D", py::overload_cast<const std::string &, const pcl::PointWithRange &, double, double, double, double, const std::string &, int> (&Class::addText3D<pcl::PointWithRange>), "text"_a, "position"_a, "textScale"_a=1.0, "r"_a=1.0, "g"_a=1.0, "b"_a=1.0, "id"_a="", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal>), "cloud"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal>), "cloud"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZINormal>), "cloud"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZLNormal>), "cloud"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel>), "cloud"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointSurfel, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZ, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZL, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZI, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGB, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBA, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointNormal, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointXYZRGBL, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::Normal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::PointNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudNormals", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudNormals<pcl::PointWithRange, pcl::PointSurfel>), "cloud"_a, "normals"_a, "level"_a=100, "scale"_a=0.02f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal>), "cloud"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal>), "cloud"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZINormal>), "cloud"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZLNormal>), "cloud"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel>), "cloud"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointSurfel, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZ, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZL, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZI, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGB, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBA, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointNormal, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointXYZRGBL, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::Normal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::Normal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::PointNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::PointXYZINormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::PointXYZLNormal>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudPrincipalCurvatures", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PrincipalCurvatures>::ConstPtr &, int, float, const std::string &, int> (&Class::addPointCloudPrincipalCurvatures<pcl::PointWithRange, pcl::PointSurfel>), "cloud"_a, "normals"_a, "pcs"_a, "level"_a=100, "scale"_a=1.0f, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointSurfel, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZ, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZL, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZI, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZRGB, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZRGBA, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointNormal, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZRGBNormal, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointXYZRGBL, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloudIntensityGradients", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::IntensityGradient>::ConstPtr &, int, double, const std::string &, int> (&Class::addPointCloudIntensityGradients<pcl::PointWithRange, pcl::IntensityGradient>), "cloud"_a, "gradients"_a, "level"_a=100, "scale"_a=1e-6, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointSurfel>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZ>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZL>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZI>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGB>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBA>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointNormal>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBL>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::string &> (&Class::updatePointCloud<pcl::PointWithRange>), "cloud"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointSurfel> &, const std::string &> (&Class::updatePointCloud<pcl::PointSurfel>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZ> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZ>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZL> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZI> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZI>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGB> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGB>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBA> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBA>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointNormal> &, const std::string &> (&Class::updatePointCloud<pcl::PointNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBNormal> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBL> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointWithRange> &, const std::string &> (&Class::updatePointCloud<pcl::PointWithRange>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const PointCloudColorHandler<pcl::PointSurfel> &, const std::string &> (&Class::updatePointCloud<pcl::PointSurfel>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZ> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZ>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZL> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZL>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZI> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZI>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGB> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGB>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBA> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBA>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointNormal> &, const std::string &> (&Class::updatePointCloud<pcl::PointNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBNormal> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBL> &, const std::string &> (&Class::updatePointCloud<pcl::PointXYZRGBL>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("updatePointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const PointCloudColorHandler<pcl::PointWithRange> &, const std::string &> (&Class::updatePointCloud<pcl::PointWithRange>), "cloud"_a, "color_handler"_a, "id"_a="cloud");
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointSurfel> &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZ> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZI> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGB> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBA> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointXYZRGBL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const PointCloudGeometryHandler<pcl::PointWithRange> &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const GeometryHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const PointCloudColorHandler<pcl::PointSurfel> &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZ> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZI> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGB> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBA> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const PointCloudColorHandler<pcl::PointWithRange> &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const GeometryHandlerConstPtr &, const ColorHandlerConstPtr &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "geometry_handler"_a, "color_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const PointCloudColorHandler<pcl::PointSurfel> &, const PointCloudGeometryHandler<pcl::PointSurfel> &, const std::string &, int> (&Class::addPointCloud<pcl::PointSurfel>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZ> &, const PointCloudGeometryHandler<pcl::PointXYZ> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZ>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZL> &, const PointCloudGeometryHandler<pcl::PointXYZL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZL>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZI> &, const PointCloudGeometryHandler<pcl::PointXYZI> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZI>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGB> &, const PointCloudGeometryHandler<pcl::PointXYZRGB> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGB>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBA> &, const PointCloudGeometryHandler<pcl::PointXYZRGBA> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBA>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointNormal> &, const PointCloudGeometryHandler<pcl::PointNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointNormal>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBNormal> &, const PointCloudGeometryHandler<pcl::PointXYZRGBNormal> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBNormal>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const PointCloudColorHandler<pcl::PointXYZRGBL> &, const PointCloudGeometryHandler<pcl::PointXYZRGBL> &, const std::string &, int> (&Class::addPointCloud<pcl::PointXYZRGBL>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPointCloud", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const PointCloudColorHandler<pcl::PointWithRange> &, const PointCloudGeometryHandler<pcl::PointWithRange> &, const std::string &, int> (&Class::addPointCloud<pcl::PointWithRange>), "cloud"_a, "color_handler"_a, "geometry_handler"_a, "id"_a="cloud", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointSurfel>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZ>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZL>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZI>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZRGB>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZRGBA>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointNormal>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZRGBNormal>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointXYZRGBL>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &, int> (&Class::addPolygonMesh<pcl::PointWithRange>), "cloud"_a, "vertices"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointSurfel>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZ>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZL>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZI>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZRGB>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZRGBA>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointNormal>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZRGBNormal>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointXYZRGBL>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("updatePolygonMesh", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::vector<pcl::Vertices> &, const std::string &> (&Class::updatePolygonMesh<pcl::PointWithRange>), "cloud"_a, "vertices"_a, "id"_a="polygon");
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointSurfel>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZ>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZI>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGB>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBA>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::vector<int> &, const std::string &, int> (&Class::addCorrespondences<pcl::PointWithRange>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointSurfel>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZ>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZL>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZI>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZRGB>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZRGBA>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZRGBNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointXYZRGBL>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int, bool> (&Class::addCorrespondences<pcl::PointWithRange>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0, "overwrite"_a=false);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointSurfel>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZ>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZI>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGB>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBA>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointXYZRGBL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::addCorrespondences<pcl::PointWithRange>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointSurfel>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZ>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZL>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZI>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGB>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBA>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBL>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::Correspondences &, int, const std::string &, int> (&Class::updateCorrespondences<pcl::PointWithRange>), "source_points"_a, "target_points"_a, "correspondences"_a, "nth"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointSurfel>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZ>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZI>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGB>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBA>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBNormal>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointXYZRGBL>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("updateCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::Correspondences &, const std::string &, int> (&Class::updateCorrespondences<pcl::PointWithRange>), "source_points"_a, "target_points"_a, "correspondences"_a, "id"_a="correspondences", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointSurfel>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZ>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZL>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZI>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGB>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBA>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointNormal>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBNormal>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBL>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointWithRange>), "cloud"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointSurfel>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZ>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZL>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZI>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGB>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBA>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointNormal>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBNormal>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBL>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const std::string &, int> (&Class::addPolygon<pcl::PointWithRange>), "cloud"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointSurfel> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointSurfel>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZ> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZ>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZL> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZL>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZI> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZI>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZRGB> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGB>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZRGBA> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBA>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointNormal> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointNormal>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZRGBNormal> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBNormal>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointXYZRGBL> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointXYZRGBL>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addPolygon", py::overload_cast<const pcl::PlanarPolygon<pcl::PointWithRange> &, double, double, double, const std::string &, int> (&Class::addPolygon<pcl::PointWithRange>), "polygon"_a, "r"_a, "g"_a, "b"_a, "id"_a="polygon", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZ &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZI &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZL &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBA &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGB &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBL &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZHSV &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::InterestPoint &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointNormal &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBNormal &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZINormal &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZLNormal &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithRange &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithViewpoint &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithScale &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointSurfel &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointDEM &, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointDEM>), "pt1"_a, "pt2"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZ &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZ, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZI &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZI, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZL &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBA, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGB, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZHSV, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::InterestPoint &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::InterestPoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZRGBNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZINormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointXYZLNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithRange &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithRange, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithViewpoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointWithScale &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointWithScale, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointSurfel &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointSurfel, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addLine", py::overload_cast<const pcl::PointDEM &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addLine<pcl::PointDEM, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="line", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZ &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZI &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGB &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZHSV &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::InterestPoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZINormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithRange &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithScale &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointSurfel &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointDEM &, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZ &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZI &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBA &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGB &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBL &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZHSV &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::InterestPoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZINormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZLNormal &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithRange &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithViewpoint &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithScale &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointSurfel &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointDEM &, double, double, double, bool, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r"_a, "g"_a, "b"_a, "display_length"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZ &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZ, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZI &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZI, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZL &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBA &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBA, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGB &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGB, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBL &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBL, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZHSV &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZHSV, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::InterestPoint &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::InterestPoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointNormal &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZRGBNormal &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZRGBNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZINormal &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZINormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointXYZLNormal &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointXYZLNormal, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithRange &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithRange, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithViewpoint &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithViewpoint, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointWithScale &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointWithScale, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointSurfel &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointSurfel, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZ &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZ>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZI &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZI>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBA &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBA>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGB &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGB>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBL &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBL>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZHSV &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZHSV>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::InterestPoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::InterestPoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZRGBNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZRGBNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZINormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZINormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointXYZLNormal &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointXYZLNormal>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithRange &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithRange>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithViewpoint &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithViewpoint>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointWithScale &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointWithScale>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointSurfel &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointSurfel>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addArrow", py::overload_cast<const pcl::PointDEM &, const pcl::PointDEM &, double, double, double, double, double, double, const std::string &, int> (&Class::addArrow<pcl::PointDEM, pcl::PointDEM>), "pt1"_a, "pt2"_a, "r_line"_a, "g_line"_a, "b_line"_a, "r_text"_a, "g_text"_a, "b_text"_a, "id"_a="arrow", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointSurfel &, double, const std::string &, int> (&Class::addSphere<pcl::PointSurfel>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZ &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZ>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZL &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZL>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZI &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZI>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGB &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGB>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBA &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBA>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointNormal &, double, const std::string &, int> (&Class::addSphere<pcl::PointNormal>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBNormal &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBNormal>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBL &, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBL>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointWithRange &, double, const std::string &, int> (&Class::addSphere<pcl::PointWithRange>), "center"_a, "radius"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointSurfel &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointSurfel>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZ &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZ>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZL &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZL>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZI &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZI>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGB &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGB>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBA &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBA>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointNormal &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointNormal>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBNormal &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBNormal>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointXYZRGBL &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointXYZRGBL>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("addSphere", py::overload_cast<const pcl::PointWithRange &, double, double, double, double, const std::string &, int> (&Class::addSphere<pcl::PointWithRange>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere", "viewport"_a=0);
    cls.def("updateSphere", py::overload_cast<const pcl::PointSurfel &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointSurfel>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZ &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZ>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZL &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZL>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZI &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZI>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZRGB &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZRGB>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZRGBA &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZRGBA>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointNormal &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointNormal>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZRGBNormal &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZRGBNormal>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointXYZRGBL &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointXYZRGBL>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
    cls.def("updateSphere", py::overload_cast<const pcl::PointWithRange &, double, double, double, double, const std::string &> (&Class::updateSphere<pcl::PointWithRange>), "center"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "id"_a="sphere");
}

void defineVisualizationPclVisualizerFunctions(py::module &m) {
}

void defineVisualizationPclVisualizerClasses(py::module &sub_module) {
    defineVisualizationPCLVisualizer(sub_module);
}