
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/eigen.h>
#include <pybind11/stl.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

namespace py = pybind11;
using namespace pybind11::literals;

PYBIND11_DECLARE_HOLDER_TYPE(T, boost::shared_ptr<T>);
#include "../../make_opaque_vectors.hpp"

#include <pcl/visualization/image_viewer.h>

using namespace pcl::visualization;


void defineVisualizationImageViewer(py::module &m) {
    using Class = pcl::visualization::ImageViewer;
    using Ptr = Class::Ptr;
    py::class_<Class, boost::shared_ptr<Class>> cls(m, "ImageViewer");
    cls.def(py::init<std::string>(), "window_title"_a="");
    cls.def("showMonoImage", py::overload_cast<const unsigned char *, unsigned, unsigned, const std::string &, double> (&Class::showMonoImage), "data"_a, "width"_a, "height"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("addMonoImage", py::overload_cast<const unsigned char *, unsigned, unsigned, const std::string &, double> (&Class::addMonoImage), "data"_a, "width"_a, "height"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("showMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity>::ConstPtr &, const std::string &, double> (&Class::showMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("addMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity>::ConstPtr &, const std::string &, double> (&Class::addMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("showMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity> &, const std::string &, double> (&Class::showMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("addMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity> &, const std::string &, double> (&Class::addMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("showMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity8u>::ConstPtr &, const std::string &, double> (&Class::showMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("addMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity8u>::ConstPtr &, const std::string &, double> (&Class::addMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("showMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity8u> &, const std::string &, double> (&Class::showMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    cls.def("addMonoImage", py::overload_cast<const pcl::PointCloud<pcl::Intensity8u> &, const std::string &, double> (&Class::addMonoImage), "cloud"_a, "layer_id"_a="mono_image", "opacity"_a=1.0);
    // Non templated function disambiguation not implemented (showRGBImage);
    // Non templated function disambiguation not implemented (addRGBImage);
    cls.def("showFloatImage", &Class::showFloatImage, "data"_a, "width"_a, "height"_a, "min_value"_a=std::numeric_limits<float>::min(), "max_value"_a=std::numeric_limits<float>::max(), "grayscale"_a=false, "layer_id"_a="float_image", "opacity"_a=1.0);
    cls.def("addFloatImage", &Class::addFloatImage, "data"_a, "width"_a, "height"_a, "min_value"_a=std::numeric_limits<float>::min(), "max_value"_a=std::numeric_limits<float>::max(), "grayscale"_a=false, "layer_id"_a="float_image", "opacity"_a=1.0);
    cls.def("showShortImage", &Class::showShortImage, "short_image"_a, "width"_a, "height"_a, "min_value"_a=std::numeric_limits<unsigned short>::min(), "max_value"_a=std::numeric_limits<unsigned short>::max(), "grayscale"_a=false, "layer_id"_a="short_image", "opacity"_a=1.0);
    cls.def("addShortImage", &Class::addShortImage, "short_image"_a, "width"_a, "height"_a, "min_value"_a=std::numeric_limits<unsigned short>::min(), "max_value"_a=std::numeric_limits<unsigned short>::max(), "grayscale"_a=false, "layer_id"_a="short_image", "opacity"_a=1.0);
    cls.def("showAngleImage", &Class::showAngleImage, "data"_a, "width"_a, "height"_a, "layer_id"_a="angle_image", "opacity"_a=1.0);
    cls.def("addAngleImage", &Class::addAngleImage, "data"_a, "width"_a, "height"_a, "layer_id"_a="angle_image", "opacity"_a=1.0);
    cls.def("showHalfAngleImage", &Class::showHalfAngleImage, "data"_a, "width"_a, "height"_a, "layer_id"_a="half_angle_image", "opacity"_a=1.0);
    cls.def("addHalfAngleImage", &Class::addHalfAngleImage, "data"_a, "width"_a, "height"_a, "layer_id"_a="half_angle_image", "opacity"_a=1.0);
    cls.def("markPoint", &Class::markPoint, "u"_a, "v"_a, "fg_color"_a, "bg_color"_a=red_color, "radius"_a=3.0, "layer_id"_a="points", "opacity"_a=1.0);
    cls.def("markPoints", py::overload_cast<const std::vector<int> &, pcl::visualization::Vector3ub, pcl::visualization::Vector3ub, double, const std::string &, double> (&Class::markPoints), "uv"_a, "fg_color"_a, "bg_color"_a=red_color, "size"_a=3.0, "layer_id"_a="markers", "opacity"_a=1.0);
    cls.def("markPoints", py::overload_cast<const std::vector<float> &, pcl::visualization::Vector3ub, pcl::visualization::Vector3ub, double, const std::string &, double> (&Class::markPoints), "uv"_a, "fg_color"_a, "bg_color"_a=red_color, "size"_a=3.0, "layer_id"_a="markers", "opacity"_a=1.0);
    cls.def("spin", &Class::spin);
    cls.def("spinOnce", &Class::spinOnce, "time"_a=1, "force_redraw"_a=true);
    cls.def("wasStopped", &Class::wasStopped);
    cls.def("close", &Class::close);
    cls.def("addCircle", py::overload_cast<unsigned int, unsigned int, double, const std::string &, double> (&Class::addCircle), "x"_a, "y"_a, "radius"_a, "layer_id"_a="circles", "opacity"_a=1.0);
    cls.def("addCircle", py::overload_cast<unsigned int, unsigned int, double, double, double, double, const std::string &, double> (&Class::addCircle), "x"_a, "y"_a, "radius"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="circles", "opacity"_a=1.0);
    // Non templated function disambiguation not implemented (addRectangle);
    // Non templated function disambiguation not implemented (addRectangle);
    // Non templated function disambiguation not implemented (addRectangle);
    // Non templated function disambiguation not implemented (addRectangle);
    cls.def("addFilledRectangle", py::overload_cast<unsigned int, unsigned int, unsigned int, unsigned int, const std::string &, double> (&Class::addFilledRectangle), "x_min"_a, "x_max"_a, "y_min"_a, "y_max"_a, "layer_id"_a="boxes", "opacity"_a=0.5);
    cls.def("addFilledRectangle", py::overload_cast<unsigned int, unsigned int, unsigned int, unsigned int, double, double, double, const std::string &, double> (&Class::addFilledRectangle), "x_min"_a, "x_max"_a, "y_min"_a, "y_max"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="boxes", "opacity"_a=0.5);
    cls.def("addLine", py::overload_cast<unsigned int, unsigned int, unsigned int, unsigned int, double, double, double, const std::string &, double> (&Class::addLine), "x_min"_a, "y_min"_a, "x_max"_a, "y_max"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="line", "opacity"_a=1.0);
    cls.def("addLine", py::overload_cast<unsigned int, unsigned int, unsigned int, unsigned int, const std::string &, double> (&Class::addLine), "x_min"_a, "y_min"_a, "x_max"_a, "y_max"_a, "layer_id"_a="line", "opacity"_a=1.0);
    cls.def("addText", py::overload_cast<unsigned int, unsigned int, const std::string &, double, double, double, const std::string &, double> (&Class::addText), "x"_a, "y"_a, "text"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="line", "opacity"_a=1.0);
    cls.def("addText", py::overload_cast<unsigned int, unsigned int, const std::string &, const std::string &, double> (&Class::addText), "x"_a, "y"_a, "text"_a, "layer_id"_a="line", "opacity"_a=1.0);
    cls.def("addLayer", &Class::addLayer, "layer_id"_a, "width"_a, "height"_a, "opacity"_a=0.5);
    cls.def("removeLayer", &Class::removeLayer, "layer_id"_a);
    cls.def("setInteractorStyle", &Class::setInteractorStyle, "style"_a);
    cls.def("setWindowTitle", &Class::setWindowTitle, "name"_a);
    cls.def("setPosition", &Class::setPosition, "x"_a, "y"_a);
    cls.def("setSize", &Class::setSize, "xw"_a, "yw"_a);
    cls.def("getSize", &Class::getSize);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBA>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGB>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBL>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBNormal>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::string &, double> (&Class::showRGBImage<pcl::PointSurfel>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBA>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGB>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBL>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBNormal>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const std::string &, double> (&Class::addRGBImage<pcl::PointSurfel>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA> &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBA>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB> &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGB>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL> &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBL>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const std::string &, double> (&Class::showRGBImage<pcl::PointXYZRGBNormal>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("showRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel> &, const std::string &, double> (&Class::showRGBImage<pcl::PointSurfel>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA> &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBA>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB> &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGB>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL> &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBL>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const std::string &, double> (&Class::addRGBImage<pcl::PointXYZRGBNormal>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRGBImage", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel> &, const std::string &, double> (&Class::addRGBImage<pcl::PointSurfel>), "cloud"_a, "layer_id"_a="rgb_image", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointXYZ &, const pcl::PointXYZ &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZ>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointXYZI &, const pcl::PointXYZI &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZI>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointXYZL &, const pcl::PointXYZL &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZL>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBA>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGB>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBL>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZHSV>::ConstPtr &, const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZHSV>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::InterestPoint>::ConstPtr &, const pcl::InterestPoint &, const pcl::InterestPoint &, const std::string &, double> (&Class::addRectangle<pcl::InterestPoint>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointNormal &, const pcl::PointNormal &, const std::string &, double> (&Class::addRectangle<pcl::PointNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZINormal>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZLNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointWithRange &, const pcl::PointWithRange &, const std::string &, double> (&Class::addRectangle<pcl::PointWithRange>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithViewpoint>::ConstPtr &, const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, const std::string &, double> (&Class::addRectangle<pcl::PointWithViewpoint>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithScale>::ConstPtr &, const pcl::PointWithScale &, const pcl::PointWithScale &, const std::string &, double> (&Class::addRectangle<pcl::PointWithScale>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointSurfel &, const pcl::PointSurfel &, const std::string &, double> (&Class::addRectangle<pcl::PointSurfel>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointDEM>::ConstPtr &, const pcl::PointDEM &, const pcl::PointDEM &, const std::string &, double> (&Class::addRectangle<pcl::PointDEM>), "image"_a, "min_pt"_a, "max_pt"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointXYZ &, const pcl::PointXYZ &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZ>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointXYZI &, const pcl::PointXYZI &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZI>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointXYZL &, const pcl::PointXYZL &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZL>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointXYZRGBA &, const pcl::PointXYZRGBA &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBA>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointXYZRGB &, const pcl::PointXYZRGB &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGB>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointXYZRGBL &, const pcl::PointXYZRGBL &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBL>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZHSV>::ConstPtr &, const pcl::PointXYZHSV &, const pcl::PointXYZHSV &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZHSV>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::InterestPoint>::ConstPtr &, const pcl::InterestPoint &, const pcl::InterestPoint &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::InterestPoint>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointNormal &, const pcl::PointNormal &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointXYZRGBNormal &, const pcl::PointXYZRGBNormal &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointXYZINormal &, const pcl::PointXYZINormal &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZINormal>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointXYZLNormal &, const pcl::PointXYZLNormal &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZLNormal>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointWithRange &, const pcl::PointWithRange &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithRange>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithViewpoint>::ConstPtr &, const pcl::PointWithViewpoint &, const pcl::PointWithViewpoint &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithViewpoint>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithScale>::ConstPtr &, const pcl::PointWithScale &, const pcl::PointWithScale &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithScale>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointSurfel &, const pcl::PointSurfel &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointSurfel>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointDEM>::ConstPtr &, const pcl::PointDEM &, const pcl::PointDEM &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointDEM>), "image"_a, "min_pt"_a, "max_pt"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZ>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZI>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZL>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBA>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGB>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBL>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZHSV>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZHSV> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZHSV>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::InterestPoint>::ConstPtr &, const pcl::PointCloud<pcl::InterestPoint> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::InterestPoint>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointNormal>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBNormal>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZINormal>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointXYZLNormal>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithRange>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithViewpoint>::ConstPtr &, const pcl::PointCloud<pcl::PointWithViewpoint> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithViewpoint>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithScale>::ConstPtr &, const pcl::PointCloud<pcl::PointWithScale> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointWithScale>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointSurfel>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointDEM>::ConstPtr &, const pcl::PointCloud<pcl::PointDEM> &, double, double, double, const std::string &, double> (&Class::addRectangle<pcl::PointDEM>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="rectangles", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZ> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZ>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZI> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZI>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZL> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZL>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBA>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGB>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBL>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZHSV>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZHSV> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZHSV>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::InterestPoint>::ConstPtr &, const pcl::PointCloud<pcl::InterestPoint> &, const std::string &, double> (&Class::addRectangle<pcl::InterestPoint>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointNormal> &, const std::string &, double> (&Class::addRectangle<pcl::PointNormal>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZRGBNormal>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZINormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZINormal> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZINormal>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointXYZLNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZLNormal> &, const std::string &, double> (&Class::addRectangle<pcl::PointXYZLNormal>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithRange>::ConstPtr &, const pcl::PointCloud<pcl::PointWithRange> &, const std::string &, double> (&Class::addRectangle<pcl::PointWithRange>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithViewpoint>::ConstPtr &, const pcl::PointCloud<pcl::PointWithViewpoint> &, const std::string &, double> (&Class::addRectangle<pcl::PointWithViewpoint>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointWithScale>::ConstPtr &, const pcl::PointCloud<pcl::PointWithScale> &, const std::string &, double> (&Class::addRectangle<pcl::PointWithScale>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel> &, const std::string &, double> (&Class::addRectangle<pcl::PointSurfel>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addRectangle", py::overload_cast<const pcl::PointCloud<pcl::PointDEM>::ConstPtr &, const pcl::PointCloud<pcl::PointDEM> &, const std::string &, double> (&Class::addRectangle<pcl::PointDEM>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=1.0);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA> &, double, double, double, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBA>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB> &, double, double, double, const std::string &, double> (&Class::addMask<pcl::PointXYZRGB>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL> &, double, double, double, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBL>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal> &, double, double, double, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBNormal>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel> &, double, double, double, const std::string &, double> (&Class::addMask<pcl::PointSurfel>), "image"_a, "mask"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBA> &, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBA>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGB> &, const std::string &, double> (&Class::addMask<pcl::PointXYZRGB>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBL> &, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBL>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const std::string &, double> (&Class::addMask<pcl::PointXYZRGBNormal>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addMask", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PointCloud<pcl::PointSurfel> &, const std::string &, double> (&Class::addMask<pcl::PointSurfel>), "image"_a, "mask"_a, "layer_id"_a="image_mask", "opacity"_a=0.5);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBA> &, double, double, double, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBA>), "image"_a, "polygon"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGB> &, double, double, double, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGB>), "image"_a, "polygon"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBL> &, double, double, double, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBL>), "image"_a, "polygon"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBNormal> &, double, double, double, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBNormal>), "image"_a, "polygon"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointSurfel> &, double, double, double, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointSurfel>), "image"_a, "polygon"_a, "r"_a, "g"_a, "b"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBA> &, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBA>), "image"_a, "polygon"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGB> &, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGB>), "image"_a, "polygon"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBL> &, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBL>), "image"_a, "polygon"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointXYZRGBNormal> &, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointXYZRGBNormal>), "image"_a, "polygon"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("addPlanarPolygon", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel>::ConstPtr &, const pcl::PlanarPolygon<pcl::PointSurfel> &, const std::string &, double> (&Class::addPlanarPolygon<pcl::PointSurfel>), "image"_a, "polygon"_a, "layer_id"_a="planar_polygon", "opacity"_a=1.0);
    cls.def("showCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBA> &, const pcl::PointCloud<pcl::PointXYZRGBA> &, const pcl::Correspondences &, int, const std::string &> (&Class::showCorrespondences<pcl::PointXYZRGBA>), "source_img"_a, "target_img"_a, "correspondences"_a, "nth"_a=1, "layer_id"_a="correspondences");
    cls.def("showCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGB> &, const pcl::PointCloud<pcl::PointXYZRGB> &, const pcl::Correspondences &, int, const std::string &> (&Class::showCorrespondences<pcl::PointXYZRGB>), "source_img"_a, "target_img"_a, "correspondences"_a, "nth"_a=1, "layer_id"_a="correspondences");
    cls.def("showCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBL> &, const pcl::PointCloud<pcl::PointXYZRGBL> &, const pcl::Correspondences &, int, const std::string &> (&Class::showCorrespondences<pcl::PointXYZRGBL>), "source_img"_a, "target_img"_a, "correspondences"_a, "nth"_a=1, "layer_id"_a="correspondences");
    cls.def("showCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const pcl::PointCloud<pcl::PointXYZRGBNormal> &, const pcl::Correspondences &, int, const std::string &> (&Class::showCorrespondences<pcl::PointXYZRGBNormal>), "source_img"_a, "target_img"_a, "correspondences"_a, "nth"_a=1, "layer_id"_a="correspondences");
    cls.def("showCorrespondences", py::overload_cast<const pcl::PointCloud<pcl::PointSurfel> &, const pcl::PointCloud<pcl::PointSurfel> &, const pcl::Correspondences &, int, const std::string &> (&Class::showCorrespondences<pcl::PointSurfel>), "source_img"_a, "target_img"_a, "correspondences"_a, "nth"_a=1, "layer_id"_a="correspondences");
}

void defineVisualizationImageViewerInteractorStyle(py::module &m) {
    using Class = pcl::visualization::ImageViewerInteractorStyle;
    py::class_<Class, boost::shared_ptr<Class>> cls(m, "ImageViewerInteractorStyle");
    cls.def(py::init<>());
    cls.def_static("New", &Class::New);
    cls.def("OnMouseWheelForward", &Class::OnMouseWheelForward);
    cls.def("OnMouseWheelBackward", &Class::OnMouseWheelBackward);
    cls.def("OnMiddleButtonDown", &Class::OnMiddleButtonDown);
    cls.def("OnRightButtonDown", &Class::OnRightButtonDown);
    cls.def("OnLeftButtonDown", &Class::OnLeftButtonDown);
    cls.def("OnChar", &Class::OnChar);
    cls.def("adjustCamera", py::overload_cast<vtkImageData*, vtkRenderer*> (&Class::adjustCamera), "image"_a, "ren"_a);
    cls.def("adjustCamera", py::overload_cast<vtkRenderer*> (&Class::adjustCamera), "ren"_a);
}

void defineVisualizationImageViewerFunctions(py::module &m) {
}

void defineVisualizationImageViewerClasses(py::module &sub_module) {
    defineVisualizationImageViewer(sub_module);
    defineVisualizationImageViewerInteractorStyle(sub_module);
}